name: Accessibility Dashboard Update

on:
  # Run after accessibility tests complete
  workflow_run:
    workflows: ["Accessibility Testing"]
    types:
      - completed
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force dashboard update'
        required: false
        default: false
        type: boolean
  
  # Scheduled updates
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
    # Daily summary at 9 AM UTC
    - cron: '0 9 * * *'

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

jobs:
  update-dashboard:
    name: Update Accessibility Dashboard
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50 # Get recent history for trends
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download accessibility test artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            
            // Get recent workflow runs
            const workflowRuns = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: 'accessibility.yml',
              status: 'completed',
              per_page: 10
            });
            
            console.log(`Found ${workflowRuns.data.workflow_runs.length} recent workflow runs`);
            
            // Download artifacts from recent runs
            for (const run of workflowRuns.data.workflow_runs.slice(0, 5)) {
              try {
                const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                  owner,
                  repo,
                  run_id: run.id
                });
                
                for (const artifact of artifacts.data.artifacts) {
                  if (artifact.name.includes('accessibility-report')) {
                    console.log(`Downloading artifact: ${artifact.name} from run ${run.id}`);
                    
                    const download = await github.rest.actions.downloadArtifact({
                      owner,
                      repo,
                      artifact_id: artifact.id,
                      archive_format: 'zip'
                    });
                    
                    // Save artifact data
                    fs.writeFileSync(`artifact-${run.id}-${artifact.name}.zip`, Buffer.from(download.data));
                  }
                }
              } catch (error) {
                console.log(`Failed to download artifacts from run ${run.id}: ${error.message}`);
              }
            }
      
      - name: Extract and process artifacts
        run: |
          # Create reports directory
          mkdir -p accessibility-reports/historical
          
          # Extract downloaded artifacts
          for zip_file in artifact-*.zip; do
            if [ -f "$zip_file" ]; then
              echo "Extracting $zip_file"
              unzip -o "$zip_file" -d "accessibility-reports/historical/"
              rm "$zip_file"
            fi
          done
          
          # List extracted files
          find accessibility-reports/historical -name "*.json" -o -name "*.html" | head -10
      
      - name: Run accessibility tests
        run: |
          # Run current accessibility tests
          npm run test:accessibility:ci || true
          
          # Ensure we have at least some test data
          if [ ! -d "accessibility-reports" ]; then
            mkdir -p accessibility-reports
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'","totalViolations":0,"violationsByLevel":{"critical":0,"serious":0,"moderate":0,"minor":0},"wcagCompliance":{"levelA":100,"levelAA":100,"levelAAA":100},"componentMetrics":[],"testCoverage":{"totalComponents":1,"testedComponents":1,"coveragePercentage":100},"performanceMetrics":{"testExecutionTime":1.0,"averageViolationsPerComponent":0}}' > accessibility-reports/latest-metrics.json
          fi
      
      - name: Update dashboard data
        run: |
          # Run dashboard integration script
          npm run accessibility:dashboard
          
          # Verify dashboard data was created
          if [ -f "accessibility-reports/dashboard-data.json" ]; then
            echo "‚úÖ Dashboard data generated successfully"
            cat accessibility-reports/dashboard-data.json | jq '.summary'
          else
            echo "‚ùå Dashboard data generation failed"
            exit 1
          fi
      
      - name: Generate dashboard HTML
        run: |
          # Create standalone dashboard HTML
          cat > accessibility-reports/dashboard.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Accessibility Dashboard - Astral Draft</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f8f9fa; }
              .container { max-width: 1200px; margin: 0 auto; }
              .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
              .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px; }
              .metric-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
              .metric-value { font-size: 32px; font-weight: bold; color: #2c3e50; }
              .metric-label { color: #6c757d; text-transform: uppercase; font-size: 12px; letter-spacing: 1px; }
              .status-success { border-left: 4px solid #28a745; }
              .status-warning { border-left: 4px solid #ffc107; }
              .status-danger { border-left: 4px solid #dc3545; }
              .last-updated { text-align: center; color: #6c757d; font-style: italic; margin-top: 20px; }
              .no-data { text-align: center; padding: 40px; color: #6c757d; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>üîç Accessibility Dashboard</h1>
                <p>Real-time monitoring of accessibility compliance and violations</p>
              </div>
              
              <div id="dashboard-content">
                <div class="no-data">
                  <h2>Loading accessibility data...</h2>
                  <p>Please wait while we fetch the latest metrics.</p>
                </div>
              </div>
              
              <div class="last-updated" id="last-updated"></div>
            </div>
            
            <script>
              // Load dashboard data
              fetch('./dashboard-data.json')
                .then(response => response.json())
                .then(data => {
                  const metrics = data.latestMetrics;
                  const summary = data.summary;
                  
                  document.getElementById('dashboard-content').innerHTML = `
                    <div class="metrics-grid">
                      <div class="metric-card ${getStatusClass(summary.lastRunStatus)}">
                        <div class="metric-label">Overall Status</div>
                        <div class="metric-value">${summary.lastRunStatus.toUpperCase()}</div>
                      </div>
                      
                      <div class="metric-card ${getScoreClass(summary.averageScore)}">
                        <div class="metric-label">Average Score</div>
                        <div class="metric-value">${summary.averageScore}%</div>
                      </div>
                      
                      <div class="metric-card ${getViolationClass(metrics.totalViolations)}">
                        <div class="metric-label">Total Violations</div>
                        <div class="metric-value">${metrics.totalViolations}</div>
                      </div>
                      
                      <div class="metric-card ${getComplianceClass(metrics.wcagCompliance.levelAA)}">
                        <div class="metric-label">WCAG AA Compliance</div>
                        <div class="metric-value">${Math.round(metrics.wcagCompliance.levelAA)}%</div>
                      </div>
                      
                      <div class="metric-card status-info">
                        <div class="metric-label">Test Coverage</div>
                        <div class="metric-value">${Math.round(metrics.testCoverage.coveragePercentage)}%</div>
                      </div>
                      
                      <div class="metric-card status-info">
                        <div class="metric-label">Total Runs</div>
                        <div class="metric-value">${summary.totalRuns}</div>
                      </div>
                    </div>
                    
                    <div class="metric-card">
                      <h3>Violation Breakdown</h3>
                      <p>üî¥ Critical: ${metrics.violationsByLevel.critical}</p>
                      <p>üü† Serious: ${metrics.violationsByLevel.serious}</p>
                      <p>üü° Moderate: ${metrics.violationsByLevel.moderate}</p>
                      <p>üü¢ Minor: ${metrics.violationsByLevel.minor}</p>
                    </div>
                  `;
                  
                  document.getElementById('last-updated').textContent = 
                    `Last updated: ${new Date(data.lastUpdated).toLocaleString()}`;
                })
                .catch(error => {
                  document.getElementById('dashboard-content').innerHTML = `
                    <div class="no-data">
                      <h2>‚ùå Failed to load dashboard data</h2>
                      <p>Error: ${error.message}</p>
                    </div>
                  `;
                });
              
              function getStatusClass(status) {
                switch(status) {
                  case 'success': return 'status-success';
                  case 'warning': return 'status-warning';
                  case 'critical': return 'status-danger';
                  default: return '';
                }
              }
              
              function getScoreClass(score) {
                return score >= 90 ? 'status-success' : score >= 70 ? 'status-warning' : 'status-danger';
              }
              
              function getViolationClass(violations) {
                return violations === 0 ? 'status-success' : violations <= 5 ? 'status-warning' : 'status-danger';
              }
              
              function getComplianceClass(compliance) {
                return compliance >= 95 ? 'status-success' : compliance >= 80 ? 'status-warning' : 'status-danger';
              }
            </script>
          </body>
          </html>
          EOF
          
          echo "‚úÖ Dashboard HTML generated"
      
      - name: Upload dashboard artifacts
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-dashboard-${{ github.run_number }}
          path: |
            accessibility-reports/dashboard.html
            accessibility-reports/dashboard-data.json
            accessibility-reports/latest-summary.md
            accessibility-reports/metrics-history.json
          retention-days: 90
      
      - name: Setup Pages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: accessibility-reports/
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('accessibility-reports/latest-summary.md')) {
              const summary = fs.readFileSync('accessibility-reports/latest-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Accessibility Dashboard Update\n\n${summary}\n\n[View Full Dashboard](https://astral-projects.github.io/astral-draft/dashboard.html)`
              });
            }
      
      - name: Create summary
        run: |
          echo "## üìä Accessibility Dashboard Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "accessibility-reports/dashboard-data.json" ]; then
            METRICS=$(cat accessibility-reports/dashboard-data.json | jq -r '.summary')
            echo "### Summary" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: $(echo $METRICS | jq -r '.lastRunStatus')" >> $GITHUB_STEP_SUMMARY
            echo "- **Average Score**: $(echo $METRICS | jq -r '.averageScore')%" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Runs**: $(echo $METRICS | jq -r '.totalRuns')" >> $GITHUB_STEP_SUMMARY
            echo "- **Trend**: $(echo $METRICS | jq -r '.trendDirection')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "- [üìä Dashboard HTML](https://astral-projects.github.io/astral-draft/dashboard.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìà Raw Data (JSON)](https://astral-projects.github.io/astral-draft/dashboard-data.json)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìã Summary Report](https://astral-projects.github.io/astral-draft/latest-summary.md)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Dashboard updated at $(date -u +%Y-%m-%dT%H:%M:%SZ)_" >> $GITHUB_STEP_SUMMARY

  notify-teams:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: update-dashboard
    if: always() && (needs.update-dashboard.result == 'failure' || github.event.schedule)
    
    steps:
      - name: Download dashboard data
        uses: actions/download-artifact@v4
        with:
          name: accessibility-dashboard-${{ github.run_number }}
          path: ./dashboard-data
      
      - name: Send notification
        run: |
          # This would integrate with your team notification system
          # For example, Slack, Microsoft Teams, or email
          
          echo "üìä Accessibility Dashboard notification would be sent here"
          echo "Status: ${{ needs.update-dashboard.result }}"
          echo "Trigger: ${{ github.event_name }}"
          
          if [ -f "./dashboard-data/latest-summary.md" ]; then
            echo "Summary available:"
            cat ./dashboard-data/latest-summary.md
          fi
